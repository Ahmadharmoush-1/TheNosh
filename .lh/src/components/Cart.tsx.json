{
    "sourceFile": "src/components/Cart.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1754046325627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754046344696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import { Textarea } from \"@/components/ui/textarea\";\r\n import { useCart } from \"@/context/CartContext\";\r\n import { CheckoutForm } from \"@/components/CheckoutForm\";\r\n import { EmptyCart } from \"@/components/EmptyCart\";\r\n-import { AnimatedCartItem } from \"@/components/AnimatedCartItem\";\r\n+import { AnimatedCartItem } from \"@/components/AnimatedCartItemss\";\r\n import { LazyImage } from \"@/components/LazyImage\";\r\n \r\n interface CartProps {\r\n   isOpen: boolean;\r\n"
                },
                {
                    "date": 1754046372586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import { Textarea } from \"@/components/ui/textarea\";\r\n import { useCart } from \"@/context/CartContext\";\r\n import { CheckoutForm } from \"@/components/CheckoutForm\";\r\n import { EmptyCart } from \"@/components/EmptyCart\";\r\n-import { AnimatedCartItem } from \"@/components/AnimatedCartItemss\";\r\n+import { AnimatedCartItem } from \"@/components/AnimatedCartItems\";\r\n import { LazyImage } from \"@/components/LazyImage\";\r\n \r\n interface CartProps {\r\n   isOpen: boolean;\r\n"
                }
            ],
            "date": 1754046325627,
            "name": "Commit-0",
            "content": "import { useState } from \"react\";\r\nimport { X, Plus, Minus, MessageCircle, Receipt } from \"lucide-react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Card, CardContent } from \"@/components/ui/card\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { useCart } from \"@/context/CartContext\";\r\nimport { CheckoutForm } from \"@/components/CheckoutForm\";\r\nimport { EmptyCart } from \"@/components/EmptyCart\";\r\nimport { AnimatedCartItem } from \"@/components/AnimatedCartItem\";\r\nimport { LazyImage } from \"@/components/LazyImage\";\r\n\r\ninterface CartProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n}\r\n\r\nexport const Cart = ({ isOpen, onClose }: CartProps) => {\r\n  const { \r\n    items, \r\n    cateringItems, \r\n    chefBookings, \r\n    updateQuantity, \r\n    updateCateringQuantity,\r\n    removeItem, \r\n    removeCateringItem,\r\n    removeChefBooking,\r\n    updateNotes, \r\n    updateCateringNotes,\r\n    updateChefNotes,\r\n    totalPrice, \r\n    clearCart \r\n  } = useCart();\r\n  \r\n  const [globalNotes, setGlobalNotes] = useState(\"\");\r\n  const [showCheckout, setShowCheckout] = useState(false);\r\n  const [animatedItem, setAnimatedItem] = useState<string | null>(null);\r\n\r\n  const formatOrderForWhatsApp = (customerInfo: {\r\n    name: string;\r\n    phone: string;\r\n    location: string;\r\n  }) => {\r\n    const isChefOnlyOrder = chefBookings.length > 0 && items.length === 0 && cateringItems.length === 0;\r\n    \r\n    let message = \"🍽️ *New Order from The Nosh*\\n\\n\";\r\n    \r\n    message += `*Customer Details:*\\n`;\r\n    message += `👤 Name: ${customerInfo.name}\\n`;\r\n    message += `📞 Phone: ${customerInfo.phone}\\n`;\r\n    message += `📍 Location: ${customerInfo.location}\\n\\n`;\r\n    \r\n    if (items.length > 0) {\r\n      message += `*Regular Items:*\\n`;\r\n      items.forEach((item, index) => {\r\n        const emoji = getItemEmoji(item.name);\r\n        message += `${index + 1}. ${emoji} *${item.name}*\\n`;\r\n        message += `   Quantity: ${item.quantity}x\\n`;\r\n        message += `   Price: $${(item.price * item.quantity).toFixed(2)}\\n`;\r\n        if (item.notes) {\r\n          message += `   Notes: ${item.notes}\\n`;\r\n        }\r\n        message += \"\\n\";\r\n      });\r\n    }\r\n\r\n    if (cateringItems.length > 0) {\r\n      message += `*Catering Items:*\\n`;\r\n      cateringItems.forEach((item, index) => {\r\n        message += `${index + 1}. 🍽️ *${item.name}*\\n`;\r\n        message += `   Quantity: ${item.quantity} pieces\\n`;\r\n        message += `   Price: $${item.totalPrice.toFixed(2)}\\n`;\r\n        if (item.notes) {\r\n          message += `   Notes: ${item.notes}\\n`;\r\n        }\r\n        message += \"\\n\";\r\n      });\r\n    }\r\n\r\n    if (chefBookings.length > 0) {\r\n      message += `*Chef Bookings:*\\n`;\r\n      chefBookings.forEach((chef, index) => {\r\n        message += `${index + 1}. 👨‍🍳 *${chef.name}*\\n`;\r\n        message += `   Experience: ${chef.experience}\\n`;\r\n        if (!isChefOnlyOrder) {\r\n          message += `   Price: $${chef.price.toFixed(2)}\\n`;\r\n        }\r\n        if (chef.notes) {\r\n          message += `   Notes: ${chef.notes}\\n`;\r\n        }\r\n        message += \"\\n\";\r\n      });\r\n    }\r\n    \r\n    if (!isChefOnlyOrder) {\r\n      const deliveryFee = 3;\r\n      const totalWithDelivery = totalPrice + deliveryFee;\r\n      \r\n      message += `📋 *Order Summary:*\\n`;\r\n      message += `💰 Subtotal: $${totalPrice.toFixed(2)}\\n`;\r\n      message += `🚚 Delivery Fee: $${deliveryFee.toFixed(2)}\\n`;\r\n      message += `💵 *Total: $${totalWithDelivery.toFixed(2)}*\\n\\n`;\r\n    }\r\n    \r\n    if (globalNotes) {\r\n      message += `📝 *Special Instructions:*\\n${globalNotes}\\n\\n`;\r\n    }\r\n    \r\n    message += \"Thank you for your order! 🙏\";\r\n    \r\n    return encodeURIComponent(message);\r\n  };\r\n\r\n  const getItemEmoji = (itemName: string): string => {\r\n    if (itemName.toLowerCase().includes('burger')) return '🍔';\r\n    if (itemName.toLowerCase().includes('pizza')) return '🍕';\r\n    if (itemName.toLowerCase().includes('fries')) return '🍟';\r\n    if (itemName.toLowerCase().includes('drink') || itemName.toLowerCase().includes('cola')) return '🥤';\r\n    return '🍽️';\r\n  };\r\n\r\n  const handleCheckoutSubmit = (customerInfo: {\r\n    name: string;\r\n    phone: string;\r\n    location: string;\r\n  }) => {\r\n    const phoneNumber = \"96176534652\";\r\n    const message = formatOrderForWhatsApp(customerInfo);\r\n    const whatsappUrl = `https://wa.me/${phoneNumber}?text=${message}`;\r\n    window.open(whatsappUrl, '_blank');\r\n    clearCart();\r\n    onClose();\r\n    setShowCheckout(false);\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  const hasItems = items.length > 0 || cateringItems.length > 0 || chefBookings.length > 0;\r\n  const isChefOnlyOrder = chefBookings.length > 0 && items.length === 0 && cateringItems.length === 0;\r\n\r\n  if (showCheckout) {\r\n    return (\r\n      <div className=\"fixed inset-0 z-50 bg-background\">\r\n        <CheckoutForm\r\n          total={totalPrice}\r\n          isChefOnlyOrder={isChefOnlyOrder}\r\n          onSubmit={handleCheckoutSubmit}\r\n          onBack={() => setShowCheckout(false)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"fixed inset-0 z-50 bg-black/50 backdrop-blur-sm\">\r\n        <div className=\"fixed right-0 top-0 h-full w-full max-w-md bg-background shadow-xl border-l border-border flex flex-col\">\r\n          {/* Header */}\r\n          <div className=\"flex items-center justify-between p-4 sm:p-6 border-b border-border bg-card flex-shrink-0\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <Receipt className=\"h-5 w-5 sm:h-6 sm:w-6 text-foreground\" />\r\n              <h2 className=\"text-xl sm:text-2xl font-bold text-foreground\">Your Cart</h2>\r\n            </div>\r\n            <Button\r\n              onClick={onClose}\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              className=\"text-muted-foreground hover:text-foreground hover:bg-accent\"\r\n            >\r\n              <X className=\"h-4 w-4 sm:h-5 sm:w-5\" />\r\n            </Button>\r\n          </div>\r\n\r\n          {/* Content - Scrollable */}\r\n          <div className=\"flex-1 overflow-y-auto p-4 sm:p-6\">\r\n            {!hasItems ? (\r\n              <EmptyCart />\r\n            ) : (\r\n              <div className=\"space-y-3 sm:space-y-4\">\r\n                {/* Regular Items */}\r\n                {items.map((item) => (\r\n                  <Card key={item.id} className=\"bg-card border-border hover:shadow-md transition-shadow\">\r\n                    <CardContent className=\"p-3 sm:p-4\">\r\n                      <div className=\"flex items-start gap-3 sm:gap-4\">\r\n                        <div className=\"relative group flex-shrink-0\">\r\n                          <LazyImage\r\n                            src={item.image}\r\n                            alt={item.name}\r\n                            className=\"w-12 h-12 sm:w-16 sm:h-16 rounded-lg transition-transform group-hover:scale-105\"\r\n                          />\r\n                        </div>\r\n                        <div className=\"flex-1 min-w-0\">\r\n                          <div className=\"flex items-start justify-between\">\r\n                            <h3 className=\"font-semibold text-card-foreground mb-1 flex items-center text-sm sm:text-base\">\r\n                              {getItemEmoji(item.name)} {item.name}\r\n                            </h3>\r\n                            <Button\r\n                              size=\"sm\"\r\n                              variant=\"ghost\"\r\n                              onClick={() => removeItem(item.id)}\r\n                              className=\"text-destructive hover:text-destructive/80 hover:bg-destructive/10 -mt-1 p-1\"\r\n                            >\r\n                              <X className=\"h-3 w-3 sm:h-4 sm:w-4\" />\r\n                            </Button>\r\n                          </div>\r\n                          <p className=\"text-foreground font-bold mb-2 sm:mb-3 text-sm sm:text-base\">${(item.price * item.quantity).toFixed(2)}</p>\r\n                          \r\n                          <div className=\"flex items-center gap-2 sm:gap-3 mb-2 sm:mb-3\">\r\n                            <Button\r\n                              size=\"sm\"\r\n                              variant=\"outline\"\r\n                              onClick={() => updateQuantity(item.id, item.quantity - 1)}\r\n                              className=\"h-6 w-6 sm:h-8 sm:w-8 p-0 border-border hover:bg-accent\"\r\n                            >\r\n                              <Minus className=\"h-2 w-2 sm:h-3 sm:w-3\" />\r\n                            </Button>\r\n                            <span className=\"mx-1 sm:mx-2 font-semibold min-w-[16px] sm:min-w-[20px] text-center text-sm sm:text-base\">{item.quantity}</span>\r\n                            <Button\r\n                              size=\"sm\"\r\n                              variant=\"outline\"\r\n                              onClick={() => updateQuantity(item.id, item.quantity + 1)}\r\n                              className=\"h-6 w-6 sm:h-8 sm:w-8 p-0 border-border hover:bg-accent\"\r\n                            >\r\n                              <Plus className=\"h-2 w-2 sm:h-3 sm:w-3\" />\r\n                            </Button>\r\n                          </div>\r\n\r\n                          <Textarea\r\n                            placeholder=\"Special notes\"\r\n                            value={item.notes || \"\"}\r\n                            onChange={(e) => updateNotes(item.id, e.target.value)}\r\n                            className=\"bg-background border-border text-xs sm:text-sm resize-none\"\r\n                            rows={2}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n                ))}\r\n\r\n                {/* Catering Items */}\r\n                {cateringItems.map((item) => (\r\n                  <Card key={`catering-${item.id}`} className=\"bg-card border-border hover:shadow-md transition-shadow\">\r\n                    <CardContent className=\"p-3 sm:p-4\">\r\n                      <div className=\"flex items-start gap-3 sm:gap-4\">\r\n                        <div className=\"relative group flex-shrink-0\">\r\n                          <LazyImage\r\n                            src={item.image}\r\n                            alt={item.name}\r\n                            className=\"w-12 h-12 sm:w-16 sm:h-16 rounded-lg transition-transform group-hover:scale-105\"\r\n                          />\r\n                        </div>\r\n                        <div className=\"flex-1 min-w-0\">\r\n                          <div className=\"flex items-start justify-between\">\r\n                            <h3 className=\"font-semibold text-card-foreground mb-1 flex items-center text-sm sm:text-base\">\r\n                              🍽️ {item.name} <span className=\"text-xs text-muted-foreground ml-2\">(Catering)</span>\r\n                            </h3>\r\n                            <Button\r\n                              size=\"sm\"\r\n                              variant=\"ghost\"\r\n                              onClick={() => removeCateringItem(item.id)}\r\n                              className=\"text-destructive hover:text-destructive/80 hover:bg-destructive/10 -mt-1 p-1\"\r\n                            >\r\n                              <X className=\"h-3 w-3 sm:h-4 sm:w-4\" />\r\n                            </Button>\r\n                          </div>\r\n                          <p className=\"text-foreground font-bold mb-2 sm:mb-3 text-sm sm:text-base\">${item.totalPrice.toFixed(2)} ({item.quantity} pieces)</p>\r\n                          \r\n                          <div className=\"flex items-center gap-2 sm:gap-3 mb-2 sm:mb-3\">\r\n                            <Button\r\n                              size=\"sm\"\r\n                              variant=\"outline\"\r\n                              onClick={() => updateCateringQuantity(item.id, item.quantity - 1)}\r\n                              className=\"h-6 w-6 sm:h-8 sm:w-8 p-0 border-border hover:bg-accent\"\r\n                            >\r\n                              <Minus className=\"h-2 w-2 sm:h-3 sm:w-3\" />\r\n                            </Button>\r\n                            <span className=\"mx-1 sm:mx-2 font-semibold min-w-[16px] sm:min-w-[20px] text-center text-sm sm:text-base\">{item.quantity}</span>\r\n                            <Button\r\n                              size=\"sm\"\r\n                              variant=\"outline\"\r\n                              onClick={() => updateCateringQuantity(item.id, item.quantity + 1)}\r\n                              className=\"h-6 w-6 sm:h-8 sm:w-8 p-0 border-border hover:bg-accent\"\r\n                            >\r\n                              <Plus className=\"h-2 w-2 sm:h-3 sm:w-3\" />\r\n                            </Button>\r\n                          </div>\r\n\r\n                          <Textarea\r\n                            placeholder=\"Special notes\"\r\n                            value={item.notes || \"\"}\r\n                            onChange={(e) => updateCateringNotes(item.id, e.target.value)}\r\n                            className=\"bg-background border-border text-xs sm:text-sm resize-none\"\r\n                            rows={2}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n                ))}\r\n\r\n                {/* Chef Bookings */}\r\n                {chefBookings.map((chef) => (\r\n                  <Card key={`chef-${chef.id}`} className=\"bg-card border-border hover:shadow-md transition-shadow\">\r\n                    <CardContent className=\"p-3 sm:p-4\">\r\n                      <div className=\"flex items-start gap-3 sm:gap-4\">\r\n                        <div className=\"relative group flex-shrink-0\">\r\n                          <LazyImage\r\n                            src={chef.image}\r\n                            alt={chef.name}\r\n                            className=\"w-12 h-12 sm:w-16 sm:h-16 rounded-lg transition-transform group-hover:scale-105\"\r\n                          />\r\n                        </div>\r\n                        <div className=\"flex-1 min-w-0\">\r\n                          <div className=\"flex items-start justify-between\">\r\n                            <h3 className=\"font-semibold text-card-foreground mb-1 flex items-center text-sm sm:text-base\">\r\n                              👨‍🍳 {chef.name} <span className=\"text-xs text-muted-foreground ml-2\">(Chef)</span>\r\n                            </h3>\r\n                            <Button\r\n                              size=\"sm\"\r\n                              variant=\"ghost\"\r\n                              onClick={() => removeChefBooking(chef.id)}\r\n                              className=\"text-destructive hover:text-destructive/80 hover:bg-destructive/10 -mt-1 p-1\"\r\n                            >\r\n                              <X className=\"h-3 w-3 sm:h-4 sm:w-4\" />\r\n                            </Button>\r\n                          </div>\r\n                           <p className=\"text-muted-foreground text-xs mb-1\">{chef.experience}</p>\r\n                           {!isChefOnlyOrder && (\r\n                             <p className=\"text-foreground font-bold mb-2 sm:mb-3 text-sm sm:text-base\">${chef.price.toFixed(2)}/session</p>\r\n                           )}\r\n\r\n                          <Textarea\r\n                            placeholder=\"Special requests for the chef\"\r\n                            value={chef.notes || \"\"}\r\n                            onChange={(e) => updateChefNotes(chef.id, e.target.value)}\r\n                            className=\"bg-background border-border text-xs sm:text-sm resize-none\"\r\n                            rows={2}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n                ))}\r\n\r\n                {/* Global Notes */}\r\n                <Card className=\"bg-card border-border\">\r\n                  <CardContent className=\"p-3 sm:p-4\">\r\n                    <label className=\"block text-xs sm:text-sm font-medium text-card-foreground mb-2 flex items-center\">\r\n                      📝 Order Notes\r\n                    </label>\r\n                    <Textarea\r\n                      placeholder=\"Any special instructions for your entire order...\"\r\n                      value={globalNotes}\r\n                      onChange={(e) => setGlobalNotes(e.target.value)}\r\n                      className=\"bg-background border-border text-xs sm:text-sm\"\r\n                      rows={3}\r\n                    />\r\n                  </CardContent>\r\n                </Card>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Footer - Fixed at bottom */}\r\n           {hasItems && (\r\n             <div className=\"border-t border-border p-4 sm:p-6 bg-card flex-shrink-0\">\r\n               {!isChefOnlyOrder && (\r\n                 <div className=\"space-y-1 sm:space-y-2 mb-3 sm:mb-4\">\r\n                   <div className=\"flex items-center justify-between text-muted-foreground text-sm sm:text-base\">\r\n                     <span>💰 Subtotal:</span>\r\n                     <span>${totalPrice.toFixed(2)}</span>\r\n                   </div>\r\n                   <div className=\"flex items-center justify-between text-muted-foreground text-sm sm:text-base\">\r\n                     <span>🚚 Delivery Fee:</span>\r\n                     <span>$3.00</span>\r\n                   </div>\r\n                   <div className=\"flex items-center justify-between text-lg sm:text-xl font-bold text-foreground pt-2 border-t border-border\">\r\n                     <span>💵 Total:</span>\r\n                     <span>${(totalPrice + 3).toFixed(2)}</span>\r\n                   </div>\r\n                 </div>\r\n               )}\r\n               <Button\r\n                 onClick={() => setShowCheckout(true)}\r\n                 className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90 font-semibold py-2 sm:py-3 text-sm sm:text-base transition-all duration-300 hover:scale-[1.02]\"\r\n               >\r\n                 <MessageCircle className=\"h-3 w-3 sm:h-4 sm:w-4 mr-2\" />\r\n                 {isChefOnlyOrder ? 'Book Chef' : 'Proceed to Checkout'}\r\n               </Button>\r\n             </div>\r\n           )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Animation Component */}\r\n      <AnimatedCartItem\r\n        isVisible={!!animatedItem}\r\n        itemName={animatedItem || \"\"}\r\n        onAnimationComplete={() => setAnimatedItem(null)}\r\n      />\r\n    </>\r\n  );\r\n};\r\n"
        }
    ]
}